/**
 * Continue Hub IDE API
 * API for Continue IDE to fetch assistants and other related information. These endpoints are primarily used by the Continue IDE extensions for VS Code and JetBrains. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ListAssistants200ResponseInnerConfigResult from './ListAssistants200ResponseInnerConfigResult';

/**
 * The ListAssistants200ResponseInner model module.
 * @module models/ListAssistants200ResponseInner
 * @version 1.0.0
 */
class ListAssistants200ResponseInner {
    /**
     * Constructs a new <code>ListAssistants200ResponseInner</code>.
     * @alias module:models/ListAssistants200ResponseInner
     * @param configResult {module:models/ListAssistants200ResponseInnerConfigResult} 
     * @param ownerSlug {String} Slug of the user or organization that owns the assistant
     * @param packageSlug {String} Slug of the assistant package
     */
    constructor(configResult, ownerSlug, packageSlug) { 
        
        ListAssistants200ResponseInner.initialize(this, configResult, ownerSlug, packageSlug);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, configResult, ownerSlug, packageSlug) { 
        obj['configResult'] = configResult;
        obj['ownerSlug'] = ownerSlug;
        obj['packageSlug'] = packageSlug;
    }

    /**
     * Constructs a <code>ListAssistants200ResponseInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:models/ListAssistants200ResponseInner} obj Optional instance to populate.
     * @return {module:models/ListAssistants200ResponseInner} The populated <code>ListAssistants200ResponseInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ListAssistants200ResponseInner();

            if (data.hasOwnProperty('configResult')) {
                obj['configResult'] = ListAssistants200ResponseInnerConfigResult.constructFromObject(data['configResult']);
            }
            if (data.hasOwnProperty('ownerSlug')) {
                obj['ownerSlug'] = ApiClient.convertToType(data['ownerSlug'], 'String');
            }
            if (data.hasOwnProperty('packageSlug')) {
                obj['packageSlug'] = ApiClient.convertToType(data['packageSlug'], 'String');
            }
            if (data.hasOwnProperty('iconUrl')) {
                obj['iconUrl'] = ApiClient.convertToType(data['iconUrl'], 'String');
            }
            if (data.hasOwnProperty('onPremProxyUrl')) {
                obj['onPremProxyUrl'] = ApiClient.convertToType(data['onPremProxyUrl'], 'String');
            }
            if (data.hasOwnProperty('useOnPremProxy')) {
                obj['useOnPremProxy'] = ApiClient.convertToType(data['useOnPremProxy'], 'Boolean');
            }
            if (data.hasOwnProperty('rawYaml')) {
                obj['rawYaml'] = ApiClient.convertToType(data['rawYaml'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ListAssistants200ResponseInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ListAssistants200ResponseInner</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ListAssistants200ResponseInner.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `configResult`
        if (data['configResult']) { // data not null
          ListAssistants200ResponseInnerConfigResult.validateJSON(data['configResult']);
        }
        // ensure the json data is a string
        if (data['ownerSlug'] && !(typeof data['ownerSlug'] === 'string' || data['ownerSlug'] instanceof String)) {
            throw new Error("Expected the field `ownerSlug` to be a primitive type in the JSON string but got " + data['ownerSlug']);
        }
        // ensure the json data is a string
        if (data['packageSlug'] && !(typeof data['packageSlug'] === 'string' || data['packageSlug'] instanceof String)) {
            throw new Error("Expected the field `packageSlug` to be a primitive type in the JSON string but got " + data['packageSlug']);
        }
        // ensure the json data is a string
        if (data['iconUrl'] && !(typeof data['iconUrl'] === 'string' || data['iconUrl'] instanceof String)) {
            throw new Error("Expected the field `iconUrl` to be a primitive type in the JSON string but got " + data['iconUrl']);
        }
        // ensure the json data is a string
        if (data['onPremProxyUrl'] && !(typeof data['onPremProxyUrl'] === 'string' || data['onPremProxyUrl'] instanceof String)) {
            throw new Error("Expected the field `onPremProxyUrl` to be a primitive type in the JSON string but got " + data['onPremProxyUrl']);
        }
        // ensure the json data is a string
        if (data['rawYaml'] && !(typeof data['rawYaml'] === 'string' || data['rawYaml'] instanceof String)) {
            throw new Error("Expected the field `rawYaml` to be a primitive type in the JSON string but got " + data['rawYaml']);
        }

        return true;
    }


}

ListAssistants200ResponseInner.RequiredProperties = ["configResult", "ownerSlug", "packageSlug"];

/**
 * @member {module:models/ListAssistants200ResponseInnerConfigResult} configResult
 */
ListAssistants200ResponseInner.prototype['configResult'] = undefined;

/**
 * Slug of the user or organization that owns the assistant
 * @member {String} ownerSlug
 */
ListAssistants200ResponseInner.prototype['ownerSlug'] = undefined;

/**
 * Slug of the assistant package
 * @member {String} packageSlug
 */
ListAssistants200ResponseInner.prototype['packageSlug'] = undefined;

/**
 * Pre-signed URL for the assistant's icon
 * @member {String} iconUrl
 */
ListAssistants200ResponseInner.prototype['iconUrl'] = undefined;

/**
 * URL of the on-premises proxy if the organization uses one
 * @member {String} onPremProxyUrl
 */
ListAssistants200ResponseInner.prototype['onPremProxyUrl'] = undefined;

/**
 * Whether the organization uses an on-premises proxy
 * @member {Boolean} useOnPremProxy
 */
ListAssistants200ResponseInner.prototype['useOnPremProxy'] = undefined;

/**
 * Raw YAML configuration of the assistant
 * @member {String} rawYaml
 */
ListAssistants200ResponseInner.prototype['rawYaml'] = undefined;






export default ListAssistants200ResponseInner;

