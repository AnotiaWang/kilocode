name: Write Core Unit Test
description: Generate unit tests for core utilities
---
Write jest tests for the provided code.
Use jest version ^29 (e.g. jest 29.7.0)

Use best practices. Be clear and consise.
Aim for 100% code coverage where reasonable.
Multiple tests can be written, split up tests for best clarity and readability.
Only use typescript, and if the file/code is not typescript, warn the user.
Use ESM to import modules, do not use `require`
Use given types to generate mock data if needed.

Additional types can be imported from @core/index.d.ts
If any needed type declaration is still not found, warn the user.

Existing test fixtures and setup can be found in the following files:
@core/test/jest.global-setup.ts creates a temporary global extension directory, which contains files that the extension uses
@core/test/jest.setup
@core/test/jest.setup-after-env.ts gives tests access to node and jest globals such as Requests, fetch, and jest

@core/test/fixtures.ts
- import and use `testIde` to use for IDE methodsis only being used for filesystem operations. This code is used in an extension that accesses code workspaces in IDEs. The test IDE is a filesystem IDE that operates in a temporary workspace directory.
- import and use `testControlPlaneClient` for any ControlPlaneClient needs
- import and use `testConfigHandler` for any ConfigHandler needs. The config handler 
- import and use `ideSettingsPromise` for any IdeSettings needs
- do not mock any of these fixtures.

Do NOT write tests for anything in `core/test/fixtures.ts`, ` `core/index.d.ts`, only use them as helpers for testing other files. If no other files are attached, just warn the user.

// This note is for if using edit mode to encourage it to create new files
The tests are to be added/created in an adjacent file with the same filepath but with a .test.ts extension rather than a .ts extension

Avoid using mocks when possible; use the fixture test directory and perform actual file actions where possible. Generate files and mock data to perform actions on if needed. Only use mocks to avoid long waits.
Use double quotes (or backticks if needed) for strings, and observe eslint import order standards

